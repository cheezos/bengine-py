"""
This type stub file was generated by pyright.
"""

import collections
import ctypes
import logging
import os
import functools
import sys
import warnings
from __future__ import division, print_function, unicode_literals
from .library import glfw as _glfw

"""
Python bindings for GLFW.
"""
__author__ = ...
__copyright__ = ...
__license__ = ...
__version__ = ...
ERROR_REPORTING = ...
NORMALIZE_GAMMA_RAMPS = ...
if _glfw is None:
    ...
_PREVIEW = ...
if _PREVIEW is None:
    ...
else:
    _PREVIEW = ...
if sys.version_info.major > 2:
    _to_char_p = ...
else:
    _to_char_p = ...
class GLFWError(UserWarning):
    """
    Exception class used for reporting GLFW errors.
    """
    def __init__(self, message, error_code=...) -> None:
        ...
    


_callback_repositories = ...
class _GLFWwindow(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWwindow GLFWwindow;
    """
    _fields_ = ...


class _GLFWmonitor(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWmonitor GLFWmonitor;
    """
    _fields_ = ...


class _GLFWvidmode(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWvidmode GLFWvidmode;
    """
    _fields_ = ...
    GLFWvidmode = ...
    Size = ...
    Bits = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, video_mode): # -> None:
        """
        Wraps a nested python sequence.
        """
        ...
    
    def unwrap(self): # -> GLFWvidmode:
        """
        Returns a GLFWvidmode object.
        """
        ...
    


class _GLFWgammaramp(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWgammaramp GLFWgammaramp;
    """
    _fields_ = ...
    GLFWgammaramp = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, gammaramp): # -> None:
        """
        Wraps a nested python sequence.
        """
        ...
    
    def unwrap(self): # -> GLFWgammaramp:
        """
        Returns a GLFWgammaramp object.
        """
        ...
    


class _GLFWcursor(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWcursor GLFWcursor;
    """
    _fields_ = ...


class _GLFWimage(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWimage GLFWimage;
    """
    _fields_ = ...
    GLFWimage = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, image):
        """
        Wraps a nested python sequence or PIL/pillow Image.
        """
        ...
    
    def unwrap(self): # -> GLFWimage:
        """
        Returns a GLFWimage object.
        """
        ...
    


class _GLFWgamepadstate(ctypes.Structure):
    """
    Wrapper for:
        typedef struct GLFWgamepadstate GLFWgamepadstate;
    """
    _fields_ = ...
    GLFWgamepadstate = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, gamepad_state): # -> None:
        """
        Wraps a nested python sequence.
        """
        ...
    
    def unwrap(self): # -> GLFWgamepadstate:
        """
        Returns a GLFWvidmode object.
        """
        ...
    


VERSION_MAJOR = ...
VERSION_MINOR = ...
VERSION_REVISION = ...
TRUE = ...
FALSE = ...
RELEASE = ...
PRESS = ...
REPEAT = ...
HAT_CENTERED = ...
HAT_UP = ...
HAT_DOWN = ...
HAT_RIGHT = ...
HAT_LEFT = ...
HAT_RIGHT_UP = ...
HAT_RIGHT_DOWN = ...
HAT_LEFT_UP = ...
HAT_LEFT_DOWN = ...
KEY_UNKNOWN = ...
KEY_SPACE = ...
KEY_APOSTROPHE = ...
KEY_COMMA = ...
KEY_MINUS = ...
KEY_PERIOD = ...
KEY_SLASH = ...
KEY_0 = ...
KEY_1 = ...
KEY_2 = ...
KEY_3 = ...
KEY_4 = ...
KEY_5 = ...
KEY_6 = ...
KEY_7 = ...
KEY_8 = ...
KEY_9 = ...
KEY_SEMICOLON = ...
KEY_EQUAL = ...
KEY_A = ...
KEY_B = ...
KEY_C = ...
KEY_D = ...
KEY_E = ...
KEY_F = ...
KEY_G = ...
KEY_H = ...
KEY_I = ...
KEY_J = ...
KEY_K = ...
KEY_L = ...
KEY_M = ...
KEY_N = ...
KEY_O = ...
KEY_P = ...
KEY_Q = ...
KEY_R = ...
KEY_S = ...
KEY_T = ...
KEY_U = ...
KEY_V = ...
KEY_W = ...
KEY_X = ...
KEY_Y = ...
KEY_Z = ...
KEY_LEFT_BRACKET = ...
KEY_BACKSLASH = ...
KEY_RIGHT_BRACKET = ...
KEY_GRAVE_ACCENT = ...
KEY_WORLD_1 = ...
KEY_WORLD_2 = ...
KEY_ESCAPE = ...
KEY_ENTER = ...
KEY_TAB = ...
KEY_BACKSPACE = ...
KEY_INSERT = ...
KEY_DELETE = ...
KEY_RIGHT = ...
KEY_LEFT = ...
KEY_DOWN = ...
KEY_UP = ...
KEY_PAGE_UP = ...
KEY_PAGE_DOWN = ...
KEY_HOME = ...
KEY_END = ...
KEY_CAPS_LOCK = ...
KEY_SCROLL_LOCK = ...
KEY_NUM_LOCK = ...
KEY_PRINT_SCREEN = ...
KEY_PAUSE = ...
KEY_F1 = ...
KEY_F2 = ...
KEY_F3 = ...
KEY_F4 = ...
KEY_F5 = ...
KEY_F6 = ...
KEY_F7 = ...
KEY_F8 = ...
KEY_F9 = ...
KEY_F10 = ...
KEY_F11 = ...
KEY_F12 = ...
KEY_F13 = ...
KEY_F14 = ...
KEY_F15 = ...
KEY_F16 = ...
KEY_F17 = ...
KEY_F18 = ...
KEY_F19 = ...
KEY_F20 = ...
KEY_F21 = ...
KEY_F22 = ...
KEY_F23 = ...
KEY_F24 = ...
KEY_F25 = ...
KEY_KP_0 = ...
KEY_KP_1 = ...
KEY_KP_2 = ...
KEY_KP_3 = ...
KEY_KP_4 = ...
KEY_KP_5 = ...
KEY_KP_6 = ...
KEY_KP_7 = ...
KEY_KP_8 = ...
KEY_KP_9 = ...
KEY_KP_DECIMAL = ...
KEY_KP_DIVIDE = ...
KEY_KP_MULTIPLY = ...
KEY_KP_SUBTRACT = ...
KEY_KP_ADD = ...
KEY_KP_ENTER = ...
KEY_KP_EQUAL = ...
KEY_LEFT_SHIFT = ...
KEY_LEFT_CONTROL = ...
KEY_LEFT_ALT = ...
KEY_LEFT_SUPER = ...
KEY_RIGHT_SHIFT = ...
KEY_RIGHT_CONTROL = ...
KEY_RIGHT_ALT = ...
KEY_RIGHT_SUPER = ...
KEY_MENU = ...
KEY_LAST = ...
MOD_SHIFT = ...
MOD_CONTROL = ...
MOD_ALT = ...
MOD_SUPER = ...
MOD_CAPS_LOCK = ...
MOD_NUM_LOCK = ...
MOUSE_BUTTON_1 = ...
MOUSE_BUTTON_2 = ...
MOUSE_BUTTON_3 = ...
MOUSE_BUTTON_4 = ...
MOUSE_BUTTON_5 = ...
MOUSE_BUTTON_6 = ...
MOUSE_BUTTON_7 = ...
MOUSE_BUTTON_8 = ...
MOUSE_BUTTON_LAST = ...
MOUSE_BUTTON_LEFT = ...
MOUSE_BUTTON_RIGHT = ...
MOUSE_BUTTON_MIDDLE = ...
JOYSTICK_1 = ...
JOYSTICK_2 = ...
JOYSTICK_3 = ...
JOYSTICK_4 = ...
JOYSTICK_5 = ...
JOYSTICK_6 = ...
JOYSTICK_7 = ...
JOYSTICK_8 = ...
JOYSTICK_9 = ...
JOYSTICK_10 = ...
JOYSTICK_11 = ...
JOYSTICK_12 = ...
JOYSTICK_13 = ...
JOYSTICK_14 = ...
JOYSTICK_15 = ...
JOYSTICK_16 = ...
JOYSTICK_LAST = ...
GAMEPAD_BUTTON_A = ...
GAMEPAD_BUTTON_B = ...
GAMEPAD_BUTTON_X = ...
GAMEPAD_BUTTON_Y = ...
GAMEPAD_BUTTON_LEFT_BUMPER = ...
GAMEPAD_BUTTON_RIGHT_BUMPER = ...
GAMEPAD_BUTTON_BACK = ...
GAMEPAD_BUTTON_START = ...
GAMEPAD_BUTTON_GUIDE = ...
GAMEPAD_BUTTON_LEFT_THUMB = ...
GAMEPAD_BUTTON_RIGHT_THUMB = ...
GAMEPAD_BUTTON_DPAD_UP = ...
GAMEPAD_BUTTON_DPAD_RIGHT = ...
GAMEPAD_BUTTON_DPAD_DOWN = ...
GAMEPAD_BUTTON_DPAD_LEFT = ...
GAMEPAD_BUTTON_LAST = ...
GAMEPAD_BUTTON_CROSS = ...
GAMEPAD_BUTTON_CIRCLE = ...
GAMEPAD_BUTTON_SQUARE = ...
GAMEPAD_BUTTON_TRIANGLE = ...
GAMEPAD_AXIS_LEFT_X = ...
GAMEPAD_AXIS_LEFT_Y = ...
GAMEPAD_AXIS_RIGHT_X = ...
GAMEPAD_AXIS_RIGHT_Y = ...
GAMEPAD_AXIS_LEFT_TRIGGER = ...
GAMEPAD_AXIS_RIGHT_TRIGGER = ...
GAMEPAD_AXIS_LAST = ...
NO_ERROR = ...
NOT_INITIALIZED = ...
NO_CURRENT_CONTEXT = ...
INVALID_ENUM = ...
INVALID_VALUE = ...
OUT_OF_MEMORY = ...
API_UNAVAILABLE = ...
VERSION_UNAVAILABLE = ...
PLATFORM_ERROR = ...
FORMAT_UNAVAILABLE = ...
NO_WINDOW_CONTEXT = ...
FOCUSED = ...
ICONIFIED = ...
RESIZABLE = ...
VISIBLE = ...
DECORATED = ...
AUTO_ICONIFY = ...
FLOATING = ...
MAXIMIZED = ...
CENTER_CURSOR = ...
TRANSPARENT_FRAMEBUFFER = ...
HOVERED = ...
FOCUS_ON_SHOW = ...
RED_BITS = ...
GREEN_BITS = ...
BLUE_BITS = ...
ALPHA_BITS = ...
DEPTH_BITS = ...
STENCIL_BITS = ...
ACCUM_RED_BITS = ...
ACCUM_GREEN_BITS = ...
ACCUM_BLUE_BITS = ...
ACCUM_ALPHA_BITS = ...
AUX_BUFFERS = ...
STEREO = ...
SAMPLES = ...
SRGB_CAPABLE = ...
REFRESH_RATE = ...
DOUBLEBUFFER = ...
CLIENT_API = ...
CONTEXT_VERSION_MAJOR = ...
CONTEXT_VERSION_MINOR = ...
CONTEXT_REVISION = ...
CONTEXT_ROBUSTNESS = ...
OPENGL_FORWARD_COMPAT = ...
OPENGL_DEBUG_CONTEXT = ...
OPENGL_PROFILE = ...
CONTEXT_RELEASE_BEHAVIOR = ...
CONTEXT_NO_ERROR = ...
CONTEXT_CREATION_API = ...
SCALE_TO_MONITOR = ...
COCOA_RETINA_FRAMEBUFFER = ...
COCOA_FRAME_NAME = ...
COCOA_GRAPHICS_SWITCHING = ...
X11_CLASS_NAME = ...
X11_INSTANCE_NAME = ...
NO_API = ...
OPENGL_API = ...
OPENGL_ES_API = ...
NO_ROBUSTNESS = ...
NO_RESET_NOTIFICATION = ...
LOSE_CONTEXT_ON_RESET = ...
OPENGL_ANY_PROFILE = ...
OPENGL_CORE_PROFILE = ...
OPENGL_COMPAT_PROFILE = ...
CURSOR = ...
STICKY_KEYS = ...
STICKY_MOUSE_BUTTONS = ...
LOCK_KEY_MODS = ...
RAW_MOUSE_MOTION = ...
CURSOR_NORMAL = ...
CURSOR_HIDDEN = ...
CURSOR_DISABLED = ...
ANY_RELEASE_BEHAVIOR = ...
RELEASE_BEHAVIOR_FLUSH = ...
RELEASE_BEHAVIOR_NONE = ...
NATIVE_CONTEXT_API = ...
EGL_CONTEXT_API = ...
OSMESA_CONTEXT_API = ...
ARROW_CURSOR = ...
IBEAM_CURSOR = ...
CROSSHAIR_CURSOR = ...
HAND_CURSOR = ...
HRESIZE_CURSOR = ...
VRESIZE_CURSOR = ...
CONNECTED = ...
DISCONNECTED = ...
JOYSTICK_HAT_BUTTONS = ...
COCOA_CHDIR_RESOURCES = ...
COCOA_MENUBAR = ...
DONT_CARE = ...
if _PREVIEW:
    ANGLE_PLATFORM_TYPE = ...
    ANGLE_PLATFORM_TYPE_NONE = ...
    ANGLE_PLATFORM_TYPE_OPENGL = ...
    ANGLE_PLATFORM_TYPE_OPENGLES = ...
    ANGLE_PLATFORM_TYPE_D3D9 = ...
    ANGLE_PLATFORM_TYPE_D3D11 = ...
    ANGLE_PLATFORM_TYPE_VULKAN = ...
    ANGLE_PLATFORM_TYPE_METAL = ...
    ANY_PLATFORM = ...
    CONTEXT_DEBUG = ...
    CURSOR_UNAVAILABLE = ...
    FEATURE_UNAVAILABLE = ...
    FEATURE_UNIMPLEMENTED = ...
    MOUSE_PASSTHROUGH = ...
    NOT_ALLOWED_CURSOR = ...
    PLATFORM = ...
    PLATFORM_COCOA = ...
    PLATFORM_NULL = ...
    PLATFORM_UNAVAILABLE = ...
    PLATFORM_WAYLAND = ...
    PLATFORM_WIN32 = ...
    PLATFORM_X11 = ...
    POINTING_HAND_CURSOR = ...
    RESIZE_ALL_CURSOR = ...
    RESIZE_EW_CURSOR = ...
    RESIZE_NESW_CURSOR = ...
    RESIZE_NS_CURSOR = ...
    RESIZE_NWSE_CURSOR = ...
    WIN32_KEYBOARD_MENU = ...
    X11_XCB_VULKAN_SURFACE = ...
_exc_info_from_callback = ...
_GLFWerrorfun = ...
_GLFWwindowposfun = ...
_GLFWwindowsizefun = ...
_GLFWwindowclosefun = ...
_GLFWwindowrefreshfun = ...
_GLFWwindowfocusfun = ...
_GLFWwindowiconifyfun = ...
_GLFWwindowmaximizefun = ...
_GLFWframebuffersizefun = ...
_GLFWwindowcontentscalefun = ...
_GLFWmousebuttonfun = ...
_GLFWcursorposfun = ...
_GLFWcursorenterfun = ...
_GLFWscrollfun = ...
_GLFWkeyfun = ...
_GLFWcharfun = ...
_GLFWmonitorfun = ...
_GLFWdropfun = ...
_GLFWcharmodsfun = ...
_GLFWjoystickfun = ...
if _PREVIEW:
    _GLFWallocatefun = ...
    _GLFWreallocatefun = ...
    _GLFWdeallocatefun = ...
    class _GLFWallocator(ctypes.Structure):
        """
        Wrapper for:
            typedef struct GLFWallocator GLFWallocator;
        """
        _fields_ = ...
    
    
def init(): # -> Any:
    """
    Initializes the GLFW library.

    Wrapper for:
        int glfwInit(void);
    """
    ...

def terminate(): # -> None:
    """
    Terminates the GLFW library.

    Wrapper for:
        void glfwTerminate(void);
    """
    ...

if hasattr(_glfw, 'glfwInitHint'):
    def init_hint(hint, value): # -> None:
        """
        Sets the specified init hint to the desired value.

        Wrapper for:
            void glfwInitHint(int hint, int value);
        """
        ...
    
def get_version(): # -> tuple[int, int, int]:
    """
    Retrieves the version of the GLFW library.

    Wrapper for:
        void glfwGetVersion(int* major, int* minor, int* rev);
    """
    ...

def get_version_string(): # -> Any:
    """
    Returns a string describing the compile-time configuration.

    Wrapper for:
        const char* glfwGetVersionString(void);
    """
    ...

if hasattr(_glfw, 'glfwGetError'):
    def get_error(): # -> tuple[Any, Any]:
        """
        Returns and clears the last error for the calling thread.

        Wrapper for:
            int glfwGetError(const char** description);
        """
        ...
    
_default_error_callback = ...
_error_callback = ...
def set_error_callback(cbfun): # -> ((error_code: Unknown, description: Unknown) -> None) | None:
    """
    Sets the error callback.

    Wrapper for:
        GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun);
    """
    ...

def get_monitors(): # -> list[Any]:
    """
    Returns the currently connected monitors.

    Wrapper for:
        GLFWmonitor** glfwGetMonitors(int* count);
    """
    ...

def get_primary_monitor(): # -> Any:
    """
    Returns the primary monitor.

    Wrapper for:
        GLFWmonitor* glfwGetPrimaryMonitor(void);
    """
    ...

def get_monitor_pos(monitor): # -> tuple[int, int]:
    """
    Returns the position of the monitor's viewport on the virtual screen.

    Wrapper for:
        void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
    """
    ...

if hasattr(_glfw, 'glfwGetMonitorWorkarea'):
    def get_monitor_workarea(monitor): # -> tuple[int, int, int, int]:
        """
        Retrives the work area of the monitor.

        Wrapper for:
            void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
        """
        ...
    
def get_monitor_physical_size(monitor): # -> tuple[int, int]:
    """
    Returns the physical size of the monitor.

    Wrapper for:
        void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* width, int* height);
    """
    ...

if hasattr(_glfw, 'glfwGetMonitorContentScale'):
    def get_monitor_content_scale(monitor): # -> tuple[float, float]:
        """
        Retrieves the content scale for the specified monitor.

        Wrapper for:
            void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale);
        """
        ...
    
def get_monitor_name(monitor): # -> Any:
    """
    Returns the name of the specified monitor.

    Wrapper for:
        const char* glfwGetMonitorName(GLFWmonitor* monitor);
    """
    ...

if hasattr(_glfw, 'glfwSetMonitorUserPointer') and hasattr(_glfw, 'glfwGetMonitorUserPointer'):
    _monitor_user_data_repository = ...
    def set_monitor_user_pointer(monitor, pointer): # -> None:
        """
        Sets the user pointer of the specified monitor. You may pass a normal
        python object into this function and it will be wrapped automatically.
        The object will be kept in existence until the pointer is set to
        something else.

        Wrapper for:
            void glfwSetMonitorUserPointer(int jid, void* pointer);
        """
        ...
    
    def get_monitor_user_pointer(monitor): # -> Any:
        """
        Returns the user pointer of the specified monitor.

        Wrapper for:
            void* glfwGetMonitorUserPointer(int jid);
        """
        ...
    
_monitor_callback = ...
def set_monitor_callback(cbfun): # -> None:
    """
    Sets the monitor configuration callback.

    Wrapper for:
        GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun);
    """
    ...

def get_video_modes(monitor): # -> list[Any]:
    """
    Returns the available video modes for the specified monitor.

    Wrapper for:
        const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
    """
    ...

def get_video_mode(monitor): # -> Any:
    """
    Returns the current mode of the specified monitor.

    Wrapper for:
        const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
    """
    ...

def set_gamma(monitor, gamma): # -> None:
    """
    Generates a gamma ramp and sets it for the specified monitor.

    Wrapper for:
        void glfwSetGamma(GLFWmonitor* monitor, float gamma);
    """
    ...

def get_gamma_ramp(monitor): # -> Any:
    """
    Retrieves the current gamma ramp for the specified monitor.

    Wrapper for:
        const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
    """
    ...

def set_gamma_ramp(monitor, ramp): # -> None:
    """
    Sets the current gamma ramp for the specified monitor.

    Wrapper for:
        void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
    """
    ...

def default_window_hints(): # -> None:
    """
    Resets all window hints to their default values.

    Wrapper for:
        void glfwDefaultWindowHints(void);
    """
    ...

def window_hint(hint, value): # -> None:
    """
    Sets the specified window hint to the desired value.

    Wrapper for:
        void glfwWindowHint(int hint, int value);
    """
    ...

if hasattr(_glfw, 'glfwWindowHintString'):
    def window_hint_string(hint, value): # -> None:
        """
        Sets the specified window hint to the desired value.

        Wrapper for:
            void glfwWindowHintString(int hint, const char* value);
        """
        ...
    
def create_window(width, height, title, monitor, share): # -> Any:
    """
    Creates a window and its associated context.

    Wrapper for:
        GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);
    """
    ...

def destroy_window(window): # -> None:
    """
    Destroys the specified window and its context.

    Wrapper for:
        void glfwDestroyWindow(GLFWwindow* window);
    """
    ...

def window_should_close(window): # -> Any:
    """
    Checks the close flag of the specified window.

    Wrapper for:
        int glfwWindowShouldClose(GLFWwindow* window);
    """
    ...

def set_window_should_close(window, value): # -> None:
    """
    Sets the close flag of the specified window.

    Wrapper for:
        void glfwSetWindowShouldClose(GLFWwindow* window, int value);
    """
    ...

def set_window_title(window, title): # -> None:
    """
    Sets the title of the specified window.

    Wrapper for:
        void glfwSetWindowTitle(GLFWwindow* window, const char* title);
    """
    ...

def get_window_pos(window): # -> tuple[int, int]:
    """
    Retrieves the position of the client area of the specified window.

    Wrapper for:
        void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
    """
    ...

def set_window_pos(window, xpos, ypos): # -> None:
    """
    Sets the position of the client area of the specified window.

    Wrapper for:
        void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
    """
    ...

def get_window_size(window): # -> tuple[int, int]:
    """
    Retrieves the size of the client area of the specified window.

    Wrapper for:
        void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
    """
    ...

def set_window_size(window, width, height): # -> None:
    """
    Sets the size of the client area of the specified window.

    Wrapper for:
        void glfwSetWindowSize(GLFWwindow* window, int width, int height);
    """
    ...

def get_framebuffer_size(window): # -> tuple[int, int]:
    """
    Retrieves the size of the framebuffer of the specified window.

    Wrapper for:
        void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
    """
    ...

if hasattr(_glfw, 'glfwGetWindowContentScale'):
    def get_window_content_scale(window): # -> tuple[float, float]:
        """
        Retrieves the content scale for the specified window.

        Wrapper for:
            void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWindowOpacity'):
    def get_window_opacity(window): # -> Any:
        """
        Returns the opacity of the whole window.

        Wrapper for:
            float glfwGetWindowOpacity(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwSetWindowOpacity'):
    def set_window_opacity(window, opacity): # -> None:
        """
        Sets the opacity of the whole window.

        Wrapper for:
            void glfwSetWindowOpacity(GLFWwindow* window, float opacity);
        """
        ...
    
def iconify_window(window): # -> None:
    """
    Iconifies the specified window.

    Wrapper for:
        void glfwIconifyWindow(GLFWwindow* window);
    """
    ...

def restore_window(window): # -> None:
    """
    Restores the specified window.

    Wrapper for:
        void glfwRestoreWindow(GLFWwindow* window);
    """
    ...

def show_window(window): # -> None:
    """
    Makes the specified window visible.

    Wrapper for:
        void glfwShowWindow(GLFWwindow* window);
    """
    ...

def hide_window(window): # -> None:
    """
    Hides the specified window.

    Wrapper for:
        void glfwHideWindow(GLFWwindow* window);
    """
    ...

if hasattr(_glfw, 'glfwRequestWindowAttention'):
    def request_window_attention(window): # -> None:
        """
        Requests user attention to the specified window.

        Wrapper for:
            void glfwRequestWindowAttention(GLFWwindow* window);
        """
        ...
    
def get_window_monitor(window): # -> Any:
    """
    Returns the monitor that the window uses for full screen mode.

    Wrapper for:
        GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
    """
    ...

def get_window_attrib(window, attrib): # -> Any:
    """
    Returns an attribute of the specified window.

    Wrapper for:
        int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
    """
    ...

if hasattr(_glfw, 'glfwSetWindowAttrib'):
    def set_window_attrib(window, attrib, value): # -> None:
        """
        Returns an attribute of the specified window.

        Wrapper for:
            void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value);
        """
        ...
    
_window_user_data_repository = ...
def set_window_user_pointer(window, pointer): # -> None:
    """
    Sets the user pointer of the specified window. You may pass a normal python object into this function and it will
    be wrapped automatically. The object will be kept in existence until the pointer is set to something else or
    until the window is destroyed.

    Wrapper for:
        void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
    """
    ...

def get_window_user_pointer(window): # -> Any:
    """
    Returns the user pointer of the specified window.

    Wrapper for:
        void* glfwGetWindowUserPointer(GLFWwindow* window);
    """
    ...

_window_pos_callback_repository = ...
def set_window_pos_callback(window, cbfun): # -> None:
    """
    Sets the position callback for the specified window.

    Wrapper for:
        GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun cbfun);
    """
    ...

_window_size_callback_repository = ...
def set_window_size_callback(window, cbfun): # -> None:
    """
    Sets the size callback for the specified window.

    Wrapper for:
        GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun cbfun);
    """
    ...

_window_close_callback_repository = ...
def set_window_close_callback(window, cbfun): # -> None:
    """
    Sets the close callback for the specified window.

    Wrapper for:
        GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun cbfun);
    """
    ...

_window_refresh_callback_repository = ...
def set_window_refresh_callback(window, cbfun): # -> None:
    """
    Sets the refresh callback for the specified window.

    Wrapper for:
        GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun cbfun);
    """
    ...

_window_focus_callback_repository = ...
def set_window_focus_callback(window, cbfun): # -> None:
    """
    Sets the focus callback for the specified window.

    Wrapper for:
        GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun cbfun);
    """
    ...

_window_iconify_callback_repository = ...
def set_window_iconify_callback(window, cbfun): # -> None:
    """
    Sets the iconify callback for the specified window.

    Wrapper for:
        GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun cbfun);
    """
    ...

if hasattr(_glfw, 'glfwSetWindowMaximizeCallback'):
    _window_maximize_callback_repository = ...
    def set_window_maximize_callback(window, cbfun): # -> None:
        """
        Sets the maximize callback for the specified window.

        Wrapper for:
            GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun cbfun);
        """
        ...
    
_framebuffer_size_callback_repository = ...
def set_framebuffer_size_callback(window, cbfun): # -> None:
    """
    Sets the framebuffer resize callback for the specified window.

    Wrapper for:
        GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun cbfun);
    """
    ...

if hasattr(_glfw, 'glfwSetWindowContentScaleCallback'):
    _window_content_scale_callback_repository = ...
    def set_window_content_scale_callback(window, cbfun): # -> None:
        """
        Sets the window content scale callback for the specified window.

        Wrapper for:
            GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun cbfun);
        """
        ...
    
def poll_events(): # -> None:
    """
    Processes all pending events.

    Wrapper for:
        void glfwPollEvents(void);
    """
    ...

def wait_events(): # -> None:
    """
    Waits until events are pending and processes them.

    Wrapper for:
        void glfwWaitEvents(void);
    """
    ...

def get_input_mode(window, mode): # -> Any:
    """
    Returns the value of an input option for the specified window.

    Wrapper for:
        int glfwGetInputMode(GLFWwindow* window, int mode);
    """
    ...

def set_input_mode(window, mode, value): # -> None:
    """
    Sets an input option for the specified window.
    @param[in] window The window whose input mode to set.
    @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
    `GLFW_STICKY_MOUSE_BUTTONS`.
    @param[in] value The new value of the specified input mode.

    Wrapper for:
        void glfwSetInputMode(GLFWwindow* window, int mode, int value);
    """
    ...

if hasattr(_glfw, 'glfwRawMouseMotionSupported'):
    def raw_mouse_motion_supported(): # -> Any:
        """
        Returns whether raw mouse motion is supported.

        Wrapper for:
            int glfwRawMouseMotionSupported(void);
        """
        ...
    
def get_key(window, key): # -> Any:
    """
    Returns the last reported state of a keyboard key for the specified
    window.

    Wrapper for:
        int glfwGetKey(GLFWwindow* window, int key);
    """
    ...

def get_mouse_button(window, button): # -> Any:
    """
    Returns the last reported state of a mouse button for the specified
    window.

    Wrapper for:
        int glfwGetMouseButton(GLFWwindow* window, int button);
    """
    ...

def get_cursor_pos(window): # -> tuple[float, float]:
    """
    Retrieves the last reported cursor position, relative to the client
    area of the window.

    Wrapper for:
        void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
    """
    ...

def set_cursor_pos(window, xpos, ypos): # -> None:
    """
    Sets the position of the cursor, relative to the client area of the window.

    Wrapper for:
        void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
    """
    ...

_key_callback_repository = ...
def set_key_callback(window, cbfun): # -> None:
    """
    Sets the key callback.

    Wrapper for:
        GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun cbfun);
    """
    ...

_char_callback_repository = ...
def set_char_callback(window, cbfun): # -> None:
    """
    Sets the Unicode character callback.

    Wrapper for:
        GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun cbfun);
    """
    ...

_mouse_button_callback_repository = ...
def set_mouse_button_callback(window, cbfun): # -> None:
    """
    Sets the mouse button callback.

    Wrapper for:
        GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun cbfun);
    """
    ...

_cursor_pos_callback_repository = ...
def set_cursor_pos_callback(window, cbfun): # -> None:
    """
    Sets the cursor position callback.

    Wrapper for:
        GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun cbfun);
    """
    ...

_cursor_enter_callback_repository = ...
def set_cursor_enter_callback(window, cbfun): # -> None:
    """
    Sets the cursor enter/exit callback.

    Wrapper for:
        GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun cbfun);
    """
    ...

_scroll_callback_repository = ...
def set_scroll_callback(window, cbfun): # -> None:
    """
    Sets the scroll callback.

    Wrapper for:
        GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun cbfun);
    """
    ...

def joystick_present(joy): # -> Any:
    """
    Returns whether the specified joystick is present.

    Wrapper for:
        int glfwJoystickPresent(int joy);
    """
    ...

def get_joystick_axes(joy): # -> tuple[Any, int]:
    """
    Returns the values of all axes of the specified joystick.

    Wrapper for:
        const float* glfwGetJoystickAxes(int joy, int* count);
    """
    ...

def get_joystick_buttons(joy): # -> tuple[Any, int]:
    """
    Returns the state of all buttons of the specified joystick.

    Wrapper for:
        const unsigned char* glfwGetJoystickButtons(int joy, int* count);
    """
    ...

if hasattr(_glfw, 'glfwGetJoystickHats'):
    def get_joystick_hats(joystick_id): # -> tuple[Any, int]:
        """
        Returns the state of all hats of the specified joystick.

        Wrapper for:
            const unsigned char* glfwGetJoystickButtons(int joy, int* count);
        """
        ...
    
def get_joystick_name(joy): # -> Any:
    """
    Returns the name of the specified joystick.

    Wrapper for:
        const char* glfwGetJoystickName(int joy);
    """
    ...

if hasattr(_glfw, 'glfwGetJoystickGUID'):
    def get_joystick_guid(joystick_id): # -> Any:
        """
        Returns the SDL compatible GUID of the specified joystick.

        Wrapper for:
            const char* glfwGetJoystickGUID(int jid);
        """
        ...
    
if hasattr(_glfw, 'glfwSetJoystickUserPointer') and hasattr(_glfw, 'glfwGetJoystickUserPointer'):
    _joystick_user_data_repository = ...
    def set_joystick_user_pointer(joystick_id, pointer): # -> None:
        """
        Sets the user pointer of the specified joystick. You may pass a normal
        python object into this function and it will be wrapped automatically.
        The object will be kept in existence until the pointer is set to
        something else.

        Wrapper for:
            void glfwSetJoystickUserPointer(int jid, void* pointer);
        """
        ...
    
    def get_joystick_user_pointer(joystick_id): # -> Any:
        """
        Returns the user pointer of the specified joystick.

        Wrapper for:
            void* glfwGetJoystickUserPointer(int jid);
        """
        ...
    
if hasattr(_glfw, 'glfwJoystickIsGamepad'):
    def joystick_is_gamepad(joystick_id): # -> Any:
        """
        Returns whether the specified joystick has a gamepad mapping.

        Wrapper for:
            int glfwJoystickIsGamepad(int jid);
        """
        ...
    
if hasattr(_glfw, 'glfwGetGamepadState'):
    def get_gamepad_state(joystick_id): # -> GLFWgamepadstate | None:
        """
        Retrieves the state of the specified joystick remapped as a gamepad.

        Wrapper for:
            int glfwGetGamepadState(int jid, GLFWgamepadstate* state);
        """
        ...
    
def set_clipboard_string(window, string): # -> None:
    """
    Sets the clipboard to the specified string.

    Wrapper for:
        void glfwSetClipboardString(GLFWwindow* window, const char* string);
    """
    ...

def get_clipboard_string(window): # -> Any:
    """
    Retrieves the contents of the clipboard as a string.

    Wrapper for:
        const char* glfwGetClipboardString(GLFWwindow* window);
    """
    ...

def get_time(): # -> Any:
    """
    Returns the value of the GLFW timer.

    Wrapper for:
        double glfwGetTime(void);
    """
    ...

def set_time(time): # -> None:
    """
    Sets the GLFW timer.

    Wrapper for:
        void glfwSetTime(double time);
    """
    ...

def make_context_current(window): # -> None:
    """
    Makes the context of the specified window current for the calling
    thread.

    Wrapper for:
        void glfwMakeContextCurrent(GLFWwindow* window);
    """
    ...

def get_current_context(): # -> Any:
    """
    Returns the window whose context is current on the calling thread.

    Wrapper for:
        GLFWwindow* glfwGetCurrentContext(void);
    """
    ...

def swap_buffers(window): # -> None:
    """
    Swaps the front and back buffers of the specified window.

    Wrapper for:
        void glfwSwapBuffers(GLFWwindow* window);
    """
    ...

def swap_interval(interval): # -> None:
    """
    Sets the swap interval for the current context.

    Wrapper for:
        void glfwSwapInterval(int interval);
    """
    ...

def extension_supported(extension): # -> Any:
    """
    Returns whether the specified extension is available.

    Wrapper for:
        int glfwExtensionSupported(const char* extension);
    """
    ...

def get_proc_address(procname): # -> Any:
    """
    Returns the address of the specified function for the current
    context.

    Wrapper for:
        GLFWglproc glfwGetProcAddress(const char* procname);
    """
    ...

if hasattr(_glfw, 'glfwSetDropCallback'):
    _window_drop_callback_repository = ...
    def set_drop_callback(window, cbfun): # -> None:
        """
        Sets the file drop callback.

        Wrapper for:
            GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun cbfun);
        """
        ...
    
if hasattr(_glfw, 'glfwSetCharModsCallback'):
    _window_char_mods_callback_repository = ...
    def set_char_mods_callback(window, cbfun): # -> None:
        """
        Sets the Unicode character with modifiers callback.

        Wrapper for:
            GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun cbfun);
        """
        ...
    
if hasattr(_glfw, 'glfwVulkanSupported'):
    def vulkan_supported(): # -> Any:
        """
        Returns whether the Vulkan loader has been found.

        Wrapper for:
            int glfwVulkanSupported(void);
        """
        ...
    
if hasattr(_glfw, 'glfwGetRequiredInstanceExtensions'):
    def get_required_instance_extensions(): # -> list[Any]:
        """
        Returns the Vulkan instance extensions required by GLFW.

        Wrapper for:
            const char** glfwGetRequiredInstanceExtensions(uint32_t* count);
        """
        ...
    
if hasattr(_glfw, 'glfwGetTimerValue'):
    def get_timer_value(): # -> int:
        """
        Returns the current value of the raw timer.

        Wrapper for:
            uint64_t glfwGetTimerValue(void);
        """
        ...
    
if hasattr(_glfw, 'glfwGetTimerFrequency'):
    def get_timer_frequency(): # -> int:
        """
        Returns the frequency, in Hz, of the raw timer.

        Wrapper for:
            uint64_t glfwGetTimerFrequency(void);
        """
        ...
    
if hasattr(_glfw, 'glfwSetJoystickCallback'):
    _joystick_callback = ...
    def set_joystick_callback(cbfun): # -> ((error_code: Unknown, description: Unknown) -> None) | None:
        """
        Sets the error callback.

        Wrapper for:
            GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun cbfun);
        """
        ...
    
if hasattr(_glfw, 'glfwUpdateGamepadMappings'):
    def update_gamepad_mappings(string): # -> Any:
        """
        Adds the specified SDL_GameControllerDB gamepad mappings.

        Wrapper for:
            int glfwUpdateGamepadMappings(const char* string);
        """
        ...
    
if hasattr(_glfw, 'glfwGetGamepadName'):
    def get_gamepad_name(joystick_id): # -> Any | None:
        """
        Returns the human-readable gamepad name for the specified joystick.

        Wrapper for:
            const char* glfwGetGamepadName(int jid);
        """
        ...
    
if hasattr(_glfw, 'glfwGetKeyName'):
    def get_key_name(key, scancode): # -> Any | None:
        """
        Returns the localized name of the specified printable key.

        Wrapper for:
            const char* glfwGetKeyName(int key, int scancode);
        """
        ...
    
if hasattr(_glfw, 'glfwGetKeyScancode'):
    def get_key_scancode(key): # -> Any:
        """
        Returns the platform-specific scancode of the specified key.

        Wrapper for:
            int glfwGetKeyScancode(int key);
        """
        ...
    
if hasattr(_glfw, 'glfwCreateCursor'):
    def create_cursor(image, xhot, yhot): # -> Any:
        """
        Creates a custom cursor.

        Wrapper for:
            GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
        """
        ...
    
if hasattr(_glfw, 'glfwCreateStandardCursor'):
    def create_standard_cursor(shape): # -> Any:
        """
        Creates a cursor with a standard shape.

        Wrapper for:
            GLFWcursor* glfwCreateStandardCursor(int shape);
        """
        ...
    
if hasattr(_glfw, 'glfwDestroyCursor'):
    def destroy_cursor(cursor): # -> None:
        """
        Destroys a cursor.

        Wrapper for:
            void glfwDestroyCursor(GLFWcursor* cursor);
        """
        ...
    
if hasattr(_glfw, 'glfwSetCursor'):
    def set_cursor(window, cursor): # -> None:
        """
        Sets the cursor for the window.

        Wrapper for:
            void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
        """
        ...
    
if hasattr(_glfw, 'glfwCreateWindowSurface'):
    def create_window_surface(instance, window, allocator, surface): # -> Any:
        """
        Creates a Vulkan surface for the specified window.

        Wrapper for:
            VkResult glfwCreateWindowSurface(VkInstance instance, GLFWwindow* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);
        """
        ...
    
if hasattr(_glfw, 'glfwGetPhysicalDevicePresentationSupport'):
    def get_physical_device_presentation_support(instance, device, queuefamily): # -> Any:
        """
        Creates a Vulkan surface for the specified window.

        Wrapper for:
            int glfwGetPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily);
        """
        ...
    
if hasattr(_glfw, 'glfwGetInstanceProcAddress'):
    def get_instance_proc_address(instance, procname): # -> Any:
        """
        Returns the address of the specified Vulkan instance function.

        Wrapper for:
            GLFWvkproc glfwGetInstanceProcAddress(VkInstance instance, const char* procname);
        """
        ...
    
if hasattr(_glfw, 'glfwSetWindowIcon'):
    def set_window_icon(window, count, images): # -> None:
        """
        Sets the icon for the specified window.

        Wrapper for:
            void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);
        """
        ...
    
if hasattr(_glfw, 'glfwSetWindowSizeLimits'):
    def set_window_size_limits(window, minwidth, minheight, maxwidth, maxheight): # -> None:
        """
        Sets the size limits of the specified window.

        Wrapper for:
            void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
        """
        ...
    
if hasattr(_glfw, 'glfwSetWindowAspectRatio'):
    def set_window_aspect_ratio(window, numer, denom): # -> None:
        """
        Sets the aspect ratio of the specified window.

        Wrapper for:
            void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWindowFrameSize'):
    def get_window_frame_size(window): # -> tuple[int, int, int, int]:
        """
        Retrieves the size of the frame of the window.

        Wrapper for:
            void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
        """
        ...
    
if hasattr(_glfw, 'glfwMaximizeWindow'):
    def maximize_window(window): # -> None:
        """
        Maximizes the specified window.

        Wrapper for:
            void glfwMaximizeWindow(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwFocusWindow'):
    def focus_window(window): # -> None:
        """
        Brings the specified window to front and sets input focus.

        Wrapper for:
            void glfwFocusWindow(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwSetWindowMonitor'):
    def set_window_monitor(window, monitor, xpos, ypos, width, height, refresh_rate): # -> None:
        """
        Sets the mode, monitor, video mode and placement of a window.

        Wrapper for:
            void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
        """
        ...
    
if hasattr(_glfw, 'glfwWaitEventsTimeout'):
    def wait_events_timeout(timeout): # -> None:
        """
        Waits with timeout until events are queued and processes them.

        Wrapper for:
            void glfwWaitEventsTimeout(double timeout);
        """
        ...
    
if hasattr(_glfw, 'glfwPostEmptyEvent'):
    def post_empty_event(): # -> None:
        """
        Posts an empty event to the event queue.

        Wrapper for:
            void glfwPostEmptyEvent();
        """
        ...
    
if hasattr(_glfw, 'glfwGetWin32Adapter'):
    def get_win32_adapter(monitor): # -> Any | None:
        """
        Returns the adapter device name of the specified monitor.

        Wrapper for:
            const char* glfwGetWin32Adapter(GLFWmonitor* monitor);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWin32Monitor'):
    def get_win32_monitor(monitor): # -> Any | None:
        """
        Returns the display device name of the specified monitor.

        Wrapper for:
            const char* glfwGetWin32Monitor(GLFWmonitor* monitor);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWin32Window'):
    def get_win32_window(window): # -> Any:
        """
        Returns the HWND of the specified window.

        Wrapper for:
            HWND glfwGetWin32Window(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWGLContext'):
    def get_wgl_context(window): # -> Any:
        """
        Returns the HGLRC of the specified window.

        Wrapper for:
            HGLRC glfwGetWGLContext(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetCocoaMonitor'):
    def get_cocoa_monitor(monitor): # -> Any:
        """
        Returns the CGDirectDisplayID of the specified monitor.

        Wrapper for:
            CGDirectDisplayID glfwGetCocoaMonitor(GLFWmonitor* monitor);
        """
        ...
    
if hasattr(_glfw, 'glfwGetCocoaWindow'):
    def get_cocoa_window(window): # -> Any:
        """
        Returns the NSWindow of the specified window.

        Wrapper for:
            id glfwGetCocoaWindow(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetNSGLContext'):
    def get_nsgl_context(window): # -> Any:
        """
        Returns the NSOpenGLContext of the specified window.

        Wrapper for:
            id glfwGetNSGLContext(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetX11Display'):
    def get_x11_display(): # -> Any:
        """
        Returns the Display used by GLFW.

        Wrapper for:
            Display* glfwGetX11Display(void);
        """
        ...
    
if hasattr(_glfw, 'glfwGetX11Adapter'):
    def get_x11_adapter(monitor): # -> Any:
        """
        Returns the RRCrtc of the specified monitor.

        Wrapper for:
            RRCrtc glfwGetX11Adapter(GLFWmonitor* monitor);
        """
        ...
    
if hasattr(_glfw, 'glfwGetX11Monitor'):
    def get_x11_monitor(monitor): # -> Any:
        """
        Returns the RROutput of the specified monitor.

        Wrapper for:
            RROutput glfwGetX11Monitor(GLFWmonitor* monitor);
        """
        ...
    
if hasattr(_glfw, 'glfwGetX11Window'):
    def get_x11_window(window): # -> Any:
        """
        Returns the Window of the specified window.

        Wrapper for:
            Window glfwGetX11Window(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwSetX11SelectionString'):
    def set_x11_selection_string(string): # -> None:
        """
        Sets the current primary selection to the specified string.

        Wrapper for:
            void glfwSetX11SelectionString(const char* string);
        """
        ...
    
if hasattr(_glfw, 'glfwGetX11SelectionString'):
    def get_x11_selection_string(): # -> Any | None:
        """
        Returns the contents of the current primary selection as a string.

        Wrapper for:
            const char* glfwGetX11SelectionString(void);
        """
        ...
    
if hasattr(_glfw, 'glfwGetGLXContext'):
    def get_glx_context(window): # -> Any:
        """
        Returns the GLXContext of the specified window.

        Wrapper for:
            GLXContext glfwGetGLXContext(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetGLXWindow'):
    def get_glx_window(window): # -> Any:
        """
        Returns the GLXWindow of the specified window.

        Wrapper for:
            GLXWindow glfwGetGLXWindow(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWaylandDisplay'):
    def get_wayland_display(): # -> Any:
        """
        Returns the struct wl_display* used by GLFW.

        Wrapper for:
            struct wl_display* glfwGetWaylandDisplay(void);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWaylandMonitor'):
    def get_wayland_monitor(monitor): # -> Any:
        """
        Returns the struct wl_output* of the specified monitor.

        Wrapper for:
            struct wl_output* glfwGetWaylandMonitor(GLFWmonitor* monitor);
        """
        ...
    
if hasattr(_glfw, 'glfwGetWaylandWindow'):
    def get_wayland_window(window): # -> Any:
        """
        Returns the main struct wl_surface* of the specified window.

        Wrapper for:
            struct wl_surface* glfwGetWaylandWindow(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetEGLDisplay'):
    def get_egl_display(): # -> Any:
        """
        Returns the EGLDisplay used by GLFW.

        Wrapper for:
            EGLDisplay glfwGetEGLDisplay(void);
        """
        ...
    
if hasattr(_glfw, 'glfwGetEGLContext'):
    def get_egl_context(window): # -> Any:
        """
        Returns the EGLContext of the specified window.

        Wrapper for:
            EGLContext glfwGetEGLContext(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetEGLSurface'):
    def get_egl_surface(window): # -> Any:
        """
        Returns the EGLSurface of the specified window.

        Wrapper for:
            EGLSurface glfwGetEGLSurface(GLFWwindow* window);
        """
        ...
    
if hasattr(_glfw, 'glfwGetOSMesaColorBuffer'):
    def get_os_mesa_color_buffer(window): # -> tuple[Unknown, Unknown, Unknown, Unknown] | None:
        """
        Retrieves the color buffer associated with the specified window.

        Wrapper for:
            int glfwGetOSMesaColorBuffer(GLFWwindow* window, int* width, int* height, int* format, void** buffer);
        """
        ...
    
if hasattr(_glfw, 'glfwGetOSMesaDepthBuffer'):
    def get_os_mesa_depth_buffer(window): # -> tuple[Unknown, Unknown, Unknown, Unknown] | None:
        """
        Retrieves the depth buffer associated with the specified window.

        Wrapper for:
            int glfwGetOSMesaDepthBuffer(GLFWwindow* window, int* width, int* height, int* bytesPerValue, void** buffer);
        """
        ...
    
if hasattr(_glfw, 'glfwGetOSMesaContext'):
    def get_os_mesa_context(window): # -> Any:
        """
        Returns the OSMesaContext of the specified window.

        Wrapper for:
            OSMesaContext glfwGetOSMesaContext(GLFWwindow* window);
        """
        ...
    
if _PREVIEW:
    ...
